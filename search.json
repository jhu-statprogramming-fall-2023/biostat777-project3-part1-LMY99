[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hiperglm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/hiperglm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"High performance GLM","text":"vignette, give examples use hiperglm package perform linear regression datasets. use US Egg Production Data TidyTuesday. data contains two data frames containing production eggs hens time well proportion cage-free eggs hens United States, originates Humane League website (url: https://thehumaneleague.org/article/E008R01-us-egg-production-data, https://osf.io/z2gxn/). data dictionary can found TidyTuesday Github repository https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-04-11/readme.md. aim answer question time month year relates egg hen production.","code":""},{"path":"/articles/hiperglm.html","id":"downloading-the-data","dir":"Articles","previous_headings":"","what":"Downloading the data","title":"High performance GLM","text":"store data folder named data(create data beforehand exist already), download data file name exists folder. Now load data downloaded file.","code":"if(!dir.exists('data')) system(\"mkdir data\") if(!'tidytuesdayR' %in% installed.packages()[,1])   install.packages('tidytuesdayR') library(tidytuesdayR) tuesdata <- tidytuesdayR::tt_load(2023, week = 15) eggproduction <- tuesdata$`egg-production` cagefreepercentages <- tuesdata$`cage-free-percentages` if(!file.exists('./data/eggprod.csv')) write.csv(eggproduction,file='./data/eggprod.csv') if(!file.exists('./data/cagefree.csv')) write.csv(cagefreepercentages,file='./data/cagefree.csv') eggprod <- read.csv('./data/eggprod.csv',row.names = 1) cagefree <- read.csv('./data/cagefree.csv',row.names = 1)"},{"path":"/articles/hiperglm.html","id":"data-wrangling-and-visualization","dir":"Articles","previous_headings":"","what":"Data Wrangling and Visualization","title":"High performance GLM","text":"first take glance original data. need extract years months entry analysis, create dummy variables 12 possible values(1-12) months. Also, since file source entry irrelevent data, need remove . Also, need rescale number hens eggs better numerical representation computation. rescale number hens millions, number eggs billions. Now perform visualization data.   # Statistical Analysis sake demonstration, assume hens production sum linear function year, indicator process variable, monthly offset month year. eggs production assumed linear function time, month indicators, interaction time process, hen production, include apparent relationship hens eggs production. can see PINV BFGS gives result. However, can tests see speed difference two methods. can see pseudo-inverse slightly faster BFGS linear model solving.","code":"head(eggprod) #>   observed_month     prod_type prod_process   n_hens     n_eggs #> 1     2016-07-31 hatching eggs          all 57975000 1147000000 #> 2     2016-08-31 hatching eggs          all 57595000 1142700000 #> 3     2016-09-30 hatching eggs          all 57161000 1093300000 #> 4     2016-10-31 hatching eggs          all 56857000 1126700000 #> 5     2016-11-30 hatching eggs          all 57116000 1096600000 #> 6     2016-12-31 hatching eggs          all 57750000 1132900000 #>                    source #> 1 ChicEggs-09-23-2016.pdf #> 2 ChicEggs-10-21-2016.pdf #> 3 ChicEggs-11-22-2016.pdf #> 4 ChicEggs-12-23-2016.pdf #> 5 ChicEggs-01-24-2017.pdf #> 6 ChicEggs-02-28-2017.pdf attach(eggprod) table(eggprod$prod_type) #>  #> hatching eggs    table eggs  #>            55           165 table(eggprod$prod_process) #>  #>                     all cage-free (non-organic)     cage-free (organic)  #>                     110                      55                      55 ep <- eggprod %>%    select(-source) %>%   mutate(observed_month=as.Date(observed_month)) %>%   mutate(year=year(observed_month), month=month(observed_month)) %>%   mutate(n_hens=n_hens/1e6, n_eggs=n_eggs/1e9) %>%   mutate(prod_type=as_factor(str_sub(prod_type,1,-6))) %>%   rename(process=prod_process) ep <- ep %>%    select(month) %>%    map_dfc(1:12,function(i,x) as.numeric(x==i),x=.) %>%   set_names(nm=paste(\"Month\",1:12,sep='')) %>%   cbind(ep, .) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> • `` -> `...6` #> • `` -> `...7` #> • `` -> `...8` #> • `` -> `...9` #> • `` -> `...10` #> • `` -> `...11` #> • `` -> `...12` head(ep) #>   observed_month prod_type process n_hens n_eggs year month Month1 Month2 #> 1     2016-07-31  hatching     all 57.975 1.1470 2016     7      0      0 #> 2     2016-08-31  hatching     all 57.595 1.1427 2016     8      0      0 #> 3     2016-09-30  hatching     all 57.161 1.0933 2016     9      0      0 #> 4     2016-10-31  hatching     all 56.857 1.1267 2016    10      0      0 #> 5     2016-11-30  hatching     all 57.116 1.0966 2016    11      0      0 #> 6     2016-12-31  hatching     all 57.750 1.1329 2016    12      0      0 #>   Month3 Month4 Month5 Month6 Month7 Month8 Month9 Month10 Month11 Month12 #> 1      0      0      0      0      1      0      0       0       0       0 #> 2      0      0      0      0      0      1      0       0       0       0 #> 3      0      0      0      0      0      0      1       0       0       0 #> 4      0      0      0      0      0      0      0       1       0       0 #> 5      0      0      0      0      0      0      0       0       1       0 #> 6      0      0      0      0      0      0      0       0       0       1 p1 <- ep %>% ggplot() +    geom_line(aes(x=observed_month,y=n_hens,group=process,col=process)) +   facet_grid(cols=vars(prod_type)) +   xlab(\"Time\") + ylab(\"Hen production(in millions)\") +   labs(title=\"Number of hens produced over time\",        subtitle=\"Grouped over production process and type\",        caption=\"Data is collected monthly\") p2 <- ep %>% ggplot() +    geom_line(aes(x=observed_month,y=n_eggs,group=process,col=process)) +   facet_grid(cols=vars(prod_type)) +   xlab(\"Time\") + ylab(\"Egg production(in billions)\") +   labs(title=\"Number of eggs produced over time\",        subtitle=\"Grouped over production process and type\",        caption=\"Data is collected monthly\") p3 <- ep %>% ggplot() + geom_point(aes(x=n_hens,y=n_eggs,col=process)) +    geom_smooth(aes(x=n_hens,y=n_eggs,group=process,col=process),               method='loess',formula='y~x',se=FALSE,linewidth=0.5) +   scale_color_discrete() +   xlab(\"Hen production(in millions)\") + ylab(\"Egg production(in billions)\") +   labs(title=\"Relation of hen and egg production\",        subtitle=\"Grouped by production process\",        caption=\"Smoothing estimate included. Note that the different processes present similar patterns\") print(p1) print(p2) print(p3) # Fit the model on hen production fm <- paste(c(\"n_hens~year*process\",paste(\"Month\",2:12,sep='')),collapse=\"+\",sep='') X <- model.matrix(lm(as.formula(fm),ep)) y <- ep$n_hens # Solve using Pseudo-inverse Algorithm(by Cpp)  hg_pinv <- hiper_glm(X,y,model='linear',option=list(solver='PINV'))  # Solve using R's OPTIM BFGS algorithm  hg_bfgs <- hiper_glm(X,y,model='linear',option=list(solver='BFGS'))  rbind(optim=coef(hg_bfgs),pinv=coef(hg_pinv)) #>       (Intercept)     year processcage-free (non-organic) #> optim   -6531.011 3.330436                      -13962.04 #> pinv    -6531.011 3.330436                      -13962.04 #>       processcage-free (organic)    Month2   Month3  Month4   Month5    Month6 #> optim                   5011.709 0.6696673 1.915809 2.06659 1.292653 0.7784028 #> pinv                    5011.709 0.6696673 1.915809 2.06659 1.292653 0.7784028 #>            Month7    Month8   Month9  Month10  Month11  Month12 #> optim -0.08928915 0.3194181 1.157218 2.327693 3.320543 4.254143 #> pinv  -0.08928915 0.3194181 1.157218 2.327693 3.320543 4.254143 #>       year:processcage-free (non-organic) year:processcage-free (organic) #> optim                            6.843653                       -2.570826 #> pinv                             6.843653                       -2.570826 # Fit the model on egg production fm <- paste(c(\"n_eggs~n_hens+year*process\",paste(\"Month\",2:12,sep='')),collapse=\"+\",sep='') X <- model.matrix(lm(as.formula(fm),ep)) y <- ep$n_eggs # Solve using Pseudo-inverse Algorithm(by Cpp)  hg_pinv <- hiper_glm(X,y,model='linear',option=list(solver='PINV'))  # Solve using R's OPTIM BFGS algorithm  hg_bfgs <- hiper_glm(X,y,model='linear',option=list(solver='BFGS'))  rbind(optim=coef(hg_bfgs),pinv=coef(hg_pinv)) #>       (Intercept)     n_hens       year processcage-free (non-organic) #> optim   -33.85306 0.02571353 0.01658583                       49.38086 #> pinv    -33.85306 0.02571353 0.01658583                       49.38086 #>       processcage-free (organic)     Month2      Month3     Month4      Month5 #> optim                   15.76478 -0.2300121 -0.01209044 -0.1004244 -0.01609951 #> pinv                    15.76478 -0.2300121 -0.01209044 -0.1004244 -0.01609951 #>            Month6     Month7     Month8      Month9    Month10     Month11 #> optim -0.08698348 0.02016305 0.02292961 -0.07435272 0.01843147 -0.05031164 #> pinv  -0.08698348 0.02016305 0.02292961 -0.07435272 0.01843147 -0.05031164 #>          Month12 year:processcage-free (non-organic) #> optim 0.02887029                         -0.02431212 #> pinv  0.02887029                         -0.02431212 #>       year:processcage-free (organic) #> optim                    -0.007623568 #> pinv                     -0.007623568 system.time(replicate(1e5,hiper_glm(X,y,model='linear',option=list(solver='PINV')))) #>    user  system elapsed  #>   4.502   0.010   4.514 system.time(replicate(1e5,hiper_glm(X,y,model='linear',option=list(solver='BFGS')))) #>    user  system elapsed  #>   4.296   0.000   4.296"},{"path":"/articles/hiperglm.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"High performance GLM","text":"hens production increases 3.3 millions per year, egg production positively related time hen production, within year, April December shows peak production given conditions fixed. Non-organic cage-free production increases faster time organic cage-free production increases slower overall production.","code":""},{"path":"/articles/hiperglm.html","id":"functions-applied","dir":"Articles","previous_headings":"","what":"Functions Applied","title":"High performance GLM","text":"dplyr: mutate, select lubridate: month, year forcats: as_factor stringr: str_sub purrr: map_dfc, set_names ggplot2: geom_line, geom_point, geom_smooth, facet_grid hiperglm(package interest): hiper_glm, coef.hglm(S3 generic hglm class, output hiper_glm)","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mingyuan Li. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li M (2023). hiperglm: High-performance generalized linear model large datasets.. R package version 0.0.0.9000, https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-LMY99/index.html, https://github.com/jhu-statprogramming-fall-2023/biostat777-project3-part1-LMY99/.","code":"@Manual{,   title = {hiperglm: High-performance generalized linear model for large datasets.},   author = {Mingyuan Li},   year = {2023},   note = {R package version 0.0.0.9000, https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-LMY99/index.html},   url = {https://github.com/jhu-statprogramming-fall-2023/biostat777-project3-part1-LMY99/}, }"}]
